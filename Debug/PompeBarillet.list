
PompeBarillet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080024dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080024dc  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047db  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001047  00000000  00000000  0002480f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  00025858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000420  00000000  00000000  00025d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001388c  00000000  00000000  00026130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004721  00000000  00000000  000399bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ada8  00000000  00000000  0003e0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8e85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f48  00000000  00000000  000a8f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002448 	.word	0x08002448

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002448 	.word	0x08002448

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <TogglePump>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TogglePump(uint8_t pin, uint16_t state){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	801a      	strh	r2, [r3, #0]

	switch (pin)
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b06      	cmp	r3, #6
 8000238:	d85b      	bhi.n	80002f2 <TogglePump+0xd2>
 800023a:	009a      	lsls	r2, r3, #2
 800023c:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <TogglePump+0xdc>)
 800023e:	18d3      	adds	r3, r2, r3
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	469f      	mov	pc, r3
		{
		case 1:
			pin=P1_Pin;
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	2208      	movs	r2, #8
 8000248:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, pin, state);
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b299      	uxth	r1, r3
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	2390      	movs	r3, #144	; 0x90
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fbb2 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 8000260:	e047      	b.n	80002f2 <TogglePump+0xd2>
		case 2:
			pin=P2_Pin;
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	2220      	movs	r2, #32
 8000266:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, pin, state);
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b299      	uxth	r1, r3
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fba3 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 800027e:	e038      	b.n	80002f2 <TogglePump+0xd2>
		case 3:
			pin=P3_Pin;
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, pin, state);
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b299      	uxth	r1, r3
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	b2da      	uxtb	r2, r3
 8000292:	2390      	movs	r3, #144	; 0x90
 8000294:	05db      	lsls	r3, r3, #23
 8000296:	0018      	movs	r0, r3
 8000298:	f001 fb94 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 800029c:	e029      	b.n	80002f2 <TogglePump+0xd2>
		case 4:
			pin=P4_Pin;
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	2280      	movs	r2, #128	; 0x80
 80002a2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, pin, state);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	b299      	uxth	r1, r3
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4813      	ldr	r0, [pc, #76]	; (8000300 <TogglePump+0xe0>)
 80002b2:	001a      	movs	r2, r3
 80002b4:	f001 fb86 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 80002b8:	e01b      	b.n	80002f2 <TogglePump+0xd2>
		case 5:
			pin=P5_Pin;
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	2220      	movs	r2, #32
 80002be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, pin, state);
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b299      	uxth	r1, r3
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <TogglePump+0xe0>)
 80002ce:	001a      	movs	r2, r3
 80002d0:	f001 fb78 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 80002d4:	e00d      	b.n	80002f2 <TogglePump+0xd2>
		case 6:
			pin=P6_Pin;
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	2208      	movs	r2, #8
 80002da:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, pin, state);
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b299      	uxth	r1, r3
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <TogglePump+0xe0>)
 80002ea:	001a      	movs	r2, r3
 80002ec:	f001 fb6a 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 80002f0:	46c0      	nop			; (mov r8, r8)

		}
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	08002480 	.word	0x08002480
 8000300:	48000400 	.word	0x48000400

08000304 <ToggleValve>:

void ToggleValve(uint16_t pin, uint16_t state){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	0002      	movs	r2, r0
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	801a      	strh	r2, [r3, #0]
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	1c0a      	adds	r2, r1, #0
 8000314:	801a      	strh	r2, [r3, #0]

	switch (pin)
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	2b06      	cmp	r3, #6
 800031c:	d857      	bhi.n	80003ce <ToggleValve+0xca>
 800031e:	009a      	lsls	r2, r3, #2
 8000320:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <ToggleValve+0xd4>)
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	469f      	mov	pc, r3
		{
		case 1:
			pin=V1_Pin;
 8000328:	1dbb      	adds	r3, r7, #6
 800032a:	2210      	movs	r2, #16
 800032c:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V1_GPIO_Port, pin, state);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	b2da      	uxtb	r2, r3
 8000334:	1dbb      	adds	r3, r7, #6
 8000336:	8819      	ldrh	r1, [r3, #0]
 8000338:	2390      	movs	r3, #144	; 0x90
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fb41 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 8000342:	e044      	b.n	80003ce <ToggleValve+0xca>
		case 2:
			pin=V2_Pin;
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	2240      	movs	r2, #64	; 0x40
 8000348:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V2_GPIO_Port, pin, state);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	8819      	ldrh	r1, [r3, #0]
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fb33 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 800035e:	e036      	b.n	80003ce <ToggleValve+0xca>
		case 3:
			pin=V3_Pin;
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V3_GPIO_Port, pin, state);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	8819      	ldrh	r1, [r3, #0]
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fb24 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 800037c:	e027      	b.n	80003ce <ToggleValve+0xca>
		case 4:
			pin=V4_Pin;
 800037e:	1dbb      	adds	r3, r7, #6
 8000380:	2240      	movs	r2, #64	; 0x40
 8000382:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V4_GPIO_Port, pin, state);
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	1dbb      	adds	r3, r7, #6
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	4813      	ldr	r0, [pc, #76]	; (80003dc <ToggleValve+0xd8>)
 8000390:	0019      	movs	r1, r3
 8000392:	f001 fb17 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 8000396:	e01a      	b.n	80003ce <ToggleValve+0xca>
		case 5:
			pin=V5_Pin;
 8000398:	1dbb      	adds	r3, r7, #6
 800039a:	2210      	movs	r2, #16
 800039c:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V5_GPIO_Port, pin, state);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	1dbb      	adds	r3, r7, #6
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <ToggleValve+0xd8>)
 80003aa:	0019      	movs	r1, r3
 80003ac:	f001 fb0a 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 80003b0:	e00d      	b.n	80003ce <ToggleValve+0xca>
		case 6:
			pin=V6_Pin;
 80003b2:	1dbb      	adds	r3, r7, #6
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <ToggleValve+0xdc>)
 80003b6:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(V6_GPIO_Port, pin, state);
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	1dbb      	adds	r3, r7, #6
 80003c0:	8819      	ldrh	r1, [r3, #0]
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fafc 	bl	80019c4 <HAL_GPIO_WritePin>
			break;
 80003cc:	46c0      	nop			; (mov r8, r8)

		}
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	0800249c 	.word	0x0800249c
 80003dc:	48000400 	.word	0x48000400
 80003e0:	ffff8000 	.word	0xffff8000

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ea:	f000 faab 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ee:	f000 f86f 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f2:	f000 f93d 	bl	8000670 <MX_GPIO_Init>
  MX_CAN_Init();
 80003f6:	f000 f8b3 	bl	8000560 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan);
 80003fa:	4b32      	ldr	r3, [pc, #200]	; (80004c4 <main+0xe0>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 f9dd 	bl	80007bc <HAL_CAN_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)>0)
 8000402:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <main+0xe0>)
 8000404:	2100      	movs	r1, #0
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fe52 	bl	80010b0 <HAL_CAN_GetRxFifoFillLevel>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d028      	beq.n	8000462 <main+0x7e>
	  {
	  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rxheader, Rxmsg);
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <main+0xe4>)
 8000412:	4a2e      	ldr	r2, [pc, #184]	; (80004cc <main+0xe8>)
 8000414:	482b      	ldr	r0, [pc, #172]	; (80004c4 <main+0xe0>)
 8000416:	2100      	movs	r1, #0
 8000418:	f000 fd2e 	bl	8000e78 <HAL_CAN_GetRxMessage>
	  uint8_t pin = Rxmsg[1];
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <main+0xe4>)
 8000420:	7852      	ldrb	r2, [r2, #1]
 8000422:	701a      	strb	r2, [r3, #0]
	  uint8_t state = Rxmsg[2];
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <main+0xe4>)
 8000428:	7892      	ldrb	r2, [r2, #2]
 800042a:	701a      	strb	r2, [r3, #0]

	  if(Rxmsg[0]=='p')
 800042c:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <main+0xe4>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b70      	cmp	r3, #112	; 0x70
 8000432:	d108      	bne.n	8000446 <main+0x62>
		 TogglePump(pin, state);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b29a      	uxth	r2, r3
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff feed 	bl	8000220 <TogglePump>
	  if(Rxmsg[0]=='v')
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <main+0xe4>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b76      	cmp	r3, #118	; 0x76
 800044c:	d109      	bne.n	8000462 <main+0x7e>
		  ToggleValve(pin, state);
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	b29a      	uxth	r2, r3
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b29b      	uxth	r3, r3
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f7ff ff51 	bl	8000304 <ToggleValve>
	  }

	  if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1)>0)
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <main+0xe0>)
 8000464:	2101      	movs	r1, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fe22 	bl	80010b0 <HAL_CAN_GetRxFifoFillLevel>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d0c8      	beq.n	8000402 <main+0x1e>
	  {
		 HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &Rxheader, Rxmsg);
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <main+0xe4>)
 8000472:	4a16      	ldr	r2, [pc, #88]	; (80004cc <main+0xe8>)
 8000474:	4813      	ldr	r0, [pc, #76]	; (80004c4 <main+0xe0>)
 8000476:	2101      	movs	r1, #1
 8000478:	f000 fcfe 	bl	8000e78 <HAL_CAN_GetRxMessage>

		 uint8_t pin = Rxmsg[1];
 800047c:	1d7b      	adds	r3, r7, #5
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <main+0xe4>)
 8000480:	7852      	ldrb	r2, [r2, #1]
 8000482:	701a      	strb	r2, [r3, #0]
		 uint8_t state = Rxmsg[2];
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <main+0xe4>)
 8000488:	7892      	ldrb	r2, [r2, #2]
 800048a:	701a      	strb	r2, [r3, #0]

		 if(Rxmsg[0]=='p')
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <main+0xe4>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b70      	cmp	r3, #112	; 0x70
 8000492:	d108      	bne.n	80004a6 <main+0xc2>
			 TogglePump(pin, state);
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	b29a      	uxth	r2, r3
 800049a:	1d7b      	adds	r3, r7, #5
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff febd 	bl	8000220 <TogglePump>
		 if(Rxmsg[0]=='v')
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <main+0xe4>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b76      	cmp	r3, #118	; 0x76
 80004ac:	d1a9      	bne.n	8000402 <main+0x1e>
			 ToggleValve(pin, state);
 80004ae:	1d7b      	adds	r3, r7, #5
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f7ff ff21 	bl	8000304 <ToggleValve>
	  if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)>0)
 80004c2:	e79e      	b.n	8000402 <main+0x1e>
 80004c4:	20000028 	.word	0x20000028
 80004c8:	20000050 	.word	0x20000050
 80004cc:	20000058 	.word	0x20000058

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b093      	sub	sp, #76	; 0x4c
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2414      	movs	r4, #20
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f001 ffa9 	bl	8002438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2310      	movs	r3, #16
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f001 ffa2 	bl	8002438 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2202      	movs	r2, #2
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	0252      	lsls	r2, r2, #9
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	187b      	adds	r3, r7, r1
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fa88 	bl	8001a34 <HAL_RCC_OscConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000528:	f000 f918 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2207      	movs	r2, #7
 8000530:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2202      	movs	r2, #2
 8000536:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2100      	movs	r1, #0
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fdf9 	bl	8002140 <HAL_RCC_ClockConfig>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000552:	f000 f903 	bl	800075c <Error_Handler>
  }
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b013      	add	sp, #76	; 0x4c
 800055c:	bd90      	pop	{r4, r7, pc}
	...

08000560 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
  /* USER CODE BEGIN CAN_Init 0 */
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <MX_CAN_Init+0x100>)
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <MX_CAN_Init+0x100>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0489      	lsls	r1, r1, #18
 8000570:	430a      	orrs	r2, r1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <MX_CAN_Init+0x100>)
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	049b      	lsls	r3, r3, #18
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
	GPIO_InitCAN.Pull= GPIO_NOPULL;
	GPIO_InitCAN.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitCAN.Alternate=GPIO_AF4_CAN;
	HAL_GPIO_Init(GPIOA, &GPIO_InitCAN);*/
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000582:	4b38      	ldr	r3, [pc, #224]	; (8000664 <MX_CAN_Init+0x104>)
 8000584:	4a38      	ldr	r2, [pc, #224]	; (8000668 <MX_CAN_Init+0x108>)
 8000586:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000588:	4b36      	ldr	r3, [pc, #216]	; (8000664 <MX_CAN_Init+0x104>)
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800058e:	4b35      	ldr	r3, [pc, #212]	; (8000664 <MX_CAN_Init+0x104>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000594:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_CAN_Init+0x104>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <MX_CAN_Init+0x104>)
 800059c:	22c0      	movs	r2, #192	; 0xc0
 800059e:	0312      	lsls	r2, r2, #12
 80005a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_CAN_Init+0x104>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	0352      	lsls	r2, r2, #13
 80005a8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_CAN_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_CAN_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_CAN_Init+0x104>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_CAN_Init+0x104>)
 80005be:	2200      	movs	r2, #0
 80005c0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_CAN_Init+0x104>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_CAN_Init+0x104>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_CAN_Init+0x104>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fa1b 	bl	8000a0c <HAL_CAN_Init>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_CAN_Init+0x7e>
  {
    Error_Handler();
 80005da:	f000 f8bf 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  filter.FilterBank = 0;
 80005de:	2108      	movs	r1, #8
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  filter.FilterIdHigh=0x130;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2298      	movs	r2, #152	; 0x98
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow=0;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh=0;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow=0;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  filter.FilterMode=CAN_FILTERMODE_IDMASK;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  filter.FilterBank=CAN_FILTER_FIFO0;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  filter.FilterActivation=CAN_FILTER_ENABLE;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2201      	movs	r2, #1
 8000616:	621a      	str	r2, [r3, #32]
  filter.SlaveStartFilterBank=14;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	220e      	movs	r2, #14
 800061c:	625a      	str	r2, [r3, #36]	; 0x24

  Txheader.StdId = 0x320;      // Détermine l'adresse du périphérique au quel la trame est destiné.
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_CAN_Init+0x10c>)
 8000620:	22c8      	movs	r2, #200	; 0xc8
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	601a      	str	r2, [r3, #0]
  	                                 // Si plusieurs périphériques sur le bus comprennent cette adresse dans leur filtre, ils recevront tous la trame.
  Txheader.ExtId = 0x0;       // Adresse étendue, non utilisée dans note cas
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_CAN_Init+0x10c>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  Txheader.RTR = CAN_RTR_DATA; // Précise que la trame contient des données
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_CAN_Init+0x10c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  Txheader.IDE = CAN_ID_STD;   // Précise que la trame est de type Standard
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_CAN_Init+0x10c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  Txheader.DLC = 4;            // Précise le nombre d'octets de données que la trame transporte ( De 0 à 8 )
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_CAN_Init+0x10c>)
 800063a:	2204      	movs	r2, #4
 800063c:	611a      	str	r2, [r3, #16]
  Txheader.TransmitGlobalTime = DISABLE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_CAN_Init+0x10c>)
 8000640:	2200      	movs	r2, #0
 8000642:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan, &filter); //configure CAN filter
 8000644:	187a      	adds	r2, r7, r1
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_CAN_Init+0x104>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fadc 	bl	8000c08 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_CAN_Init+0x104>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fbca 	bl	8000dec <HAL_CAN_Start>
    //HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
  /* USER CODE END CAN_Init 2 */

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b00c      	add	sp, #48	; 0x30
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	20000028 	.word	0x20000028
 8000668:	40006400 	.word	0x40006400
 800066c:	20000078 	.word	0x20000078

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	240c      	movs	r4, #12
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f001 fed9 	bl	8002438 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <MX_GPIO_Init+0xe0>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_GPIO_Init+0xe0>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	03c9      	lsls	r1, r1, #15
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_GPIO_Init+0xe0>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	03db      	lsls	r3, r3, #15
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0289      	lsls	r1, r1, #10
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	02c9      	lsls	r1, r1, #11
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	02db      	lsls	r3, r3, #11
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P1_Pin|V1_Pin|P2_Pin|V2_Pin
 80006da:	491e      	ldr	r1, [pc, #120]	; (8000754 <MX_GPIO_Init+0xe4>)
 80006dc:	2390      	movs	r3, #144	; 0x90
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 f96e 	bl	80019c4 <HAL_GPIO_WritePin>
                          |P3_Pin|V6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V3_Pin|P6_Pin|V5_Pin|P5_Pin
 80006e8:	23fc      	movs	r3, #252	; 0xfc
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0019      	movs	r1, r3
 80006f2:	f001 f967 	bl	80019c4 <HAL_GPIO_WritePin>
                          |V4_Pin|P4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin V1_Pin P2_Pin V2_Pin
                           P3_Pin V6_Pin */
  GPIO_InitStruct.Pin = P1_Pin|V1_Pin|P2_Pin|V2_Pin
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_GPIO_Init+0xe4>)
 80006fc:	601a      	str	r2, [r3, #0]
                          |P3_Pin|V6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	000c      	movs	r4, r1
 8000712:	187a      	adds	r2, r7, r1
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f000 ffea 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : V3_Pin P6_Pin V5_Pin P5_Pin
                           V4_Pin P4_Pin */
  GPIO_InitStruct.Pin = V3_Pin|P6_Pin|V5_Pin|P5_Pin
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	22fc      	movs	r2, #252	; 0xfc
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	601a      	str	r2, [r3, #0]
                          |V4_Pin|P4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2201      	movs	r2, #1
 800072e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	187b      	adds	r3, r7, r1
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <MX_GPIO_Init+0xe8>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f000 ffd6 	bl	80016f4 <HAL_GPIO_Init>

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b009      	add	sp, #36	; 0x24
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	000080f8 	.word	0x000080f8
 8000758:	48000400 	.word	0x48000400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 HAL_GPIO_TogglePin(GPIOA, P1_Pin);
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2108      	movs	r1, #8
 8000766:	0018      	movs	r0, r3
 8000768:	f001 f949 	bl	80019fe <HAL_GPIO_TogglePin>
  /* USER CODE END Error_Handler_Debug */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0549      	lsls	r1, r1, #21
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_MspInit+0x44>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	055b      	lsls	r3, r3, #21
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	2314      	movs	r3, #20
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f001 fe32 	bl	8002438 <memset>
  if(hcan->Instance==CAN)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <HAL_CAN_MspInit+0xa4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d13b      	bne.n	8000856 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 80007e0:	69da      	ldr	r2, [r3, #28]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0489      	lsls	r1, r1, #18
 80007e8:	430a      	orrs	r2, r1
 80007ea:	61da      	str	r2, [r3, #28]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 80007ee:	69da      	ldr	r2, [r3, #28]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	049b      	lsls	r3, r3, #18
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 80007fc:	695a      	ldr	r2, [r3, #20]
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0289      	lsls	r1, r1, #10
 8000804:	430a      	orrs	r2, r1
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_CAN_MspInit+0xa8>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	029b      	lsls	r3, r3, #10
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000816:	2114      	movs	r1, #20
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	; 0xc0
 800081c:	0152      	lsls	r2, r2, #5
 800081e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2202      	movs	r2, #2
 8000824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2203      	movs	r2, #3
 8000830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2204      	movs	r2, #4
 8000836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	187a      	adds	r2, r7, r1
 800083a:	2390      	movs	r3, #144	; 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 ff57 	bl	80016f4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	201e      	movs	r0, #30
 800084c:	f000 ff20 	bl	8001690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000850:	201e      	movs	r0, #30
 8000852:	f000 ff32 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00a      	add	sp, #40	; 0x28
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40006400 	.word	0x40006400
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f8a0 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <CEC_CAN_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fc2f 	bl	8001106 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000028 	.word	0x20000028

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <LoopForever+0x6>)
    LDR R1, [R0]
 80008c6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008c8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <LoopForever+0xa>)
    CMP R1, R2
 80008cc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008ce:	d105      	bne.n	80008dc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008d2:	4913      	ldr	r1, [pc, #76]	; (8000920 <LoopForever+0x12>)
    STR R1, [R0]
 80008d4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008d8:	4913      	ldr	r1, [pc, #76]	; (8000928 <LoopForever+0x1a>)
    STR R1, [R0]
 80008da:	6001      	str	r1, [r0, #0]

080008dc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <LoopForever+0x1e>)
  ldr r1, =_edata
 80008de:	4914      	ldr	r1, [pc, #80]	; (8000930 <LoopForever+0x22>)
  ldr r2, =_sidata
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <LoopForever+0x26>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008f4:	4c11      	ldr	r4, [pc, #68]	; (800093c <LoopForever+0x2e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000906:	f001 fd73 	bl	80023f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fd6b 	bl	80003e4 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000914:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000918:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800091c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000920:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000924:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000928:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	080024d0 	.word	0x080024d0
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000098 	.word	0x20000098

08000940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_IRQHandler>
	...

08000944 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <HAL_Init+0x24>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_Init+0x24>)
 800094e:	2110      	movs	r1, #16
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f809 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095a:	f7ff ff0b 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_InitTick+0x5c>)
 8000976:	681c      	ldr	r4, [r3, #0]
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_InitTick+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	0019      	movs	r1, r3
 800097e:	23fa      	movs	r3, #250	; 0xfa
 8000980:	0098      	lsls	r0, r3, #2
 8000982:	f7ff fbc1 	bl	8000108 <__udivsi3>
 8000986:	0003      	movs	r3, r0
 8000988:	0019      	movs	r1, r3
 800098a:	0020      	movs	r0, r4
 800098c:	f7ff fbbc 	bl	8000108 <__udivsi3>
 8000990:	0003      	movs	r3, r0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fea1 	bl	80016da <HAL_SYSTICK_Config>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e00f      	b.n	80009c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d80b      	bhi.n	80009be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2301      	movs	r3, #1
 80009aa:	425b      	negs	r3, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fe6e 	bl	8001690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_InitTick+0x64>)
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b003      	add	sp, #12
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	18d2      	adds	r2, r2, r3
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000094 	.word	0x20000094

080009f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000094 	.word	0x20000094

08000a0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e0f0      	b.n	8000c00 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2220      	movs	r2, #32
 8000a22:	5c9b      	ldrb	r3, [r3, r2]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fec5 	bl	80007bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	438a      	bics	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a42:	f7ff ffd9 	bl	80009f8 <HAL_GetTick>
 8000a46:	0003      	movs	r3, r0
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a4a:	e013      	b.n	8000a74 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a4c:	f7ff ffd4 	bl	80009f8 <HAL_GetTick>
 8000a50:	0002      	movs	r2, r0
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2b0a      	cmp	r3, #10
 8000a58:	d90c      	bls.n	8000a74 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	0292      	lsls	r2, r2, #10
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e0c5      	b.n	8000c00 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d1e5      	bne.n	8000a4c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a90:	f7ff ffb2 	bl	80009f8 <HAL_GetTick>
 8000a94:	0003      	movs	r3, r0
 8000a96:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a98:	e013      	b.n	8000ac2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a9a:	f7ff ffad 	bl	80009f8 <HAL_GetTick>
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d90c      	bls.n	8000ac2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0292      	lsls	r2, r2, #10
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2105      	movs	r1, #5
 8000abc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e09e      	b.n	8000c00 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	d0e5      	beq.n	8000a9a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7e1b      	ldrb	r3, [r3, #24]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d108      	bne.n	8000ae8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e007      	b.n	8000af8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	438a      	bics	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7e5b      	ldrb	r3, [r3, #25]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d108      	bne.n	8000b12 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e007      	b.n	8000b22 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	438a      	bics	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7e9b      	ldrb	r3, [r3, #26]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d108      	bne.n	8000b3c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2120      	movs	r1, #32
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2120      	movs	r1, #32
 8000b48:	438a      	bics	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7edb      	ldrb	r3, [r3, #27]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d108      	bne.n	8000b66 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2110      	movs	r1, #16
 8000b60:	438a      	bics	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e007      	b.n	8000b76 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2110      	movs	r1, #16
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7f1b      	ldrb	r3, [r3, #28]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d108      	bne.n	8000b90 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2108      	movs	r1, #8
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e007      	b.n	8000ba0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7f5b      	ldrb	r3, [r3, #29]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	438a      	bics	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	0011      	movs	r1, r2
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b004      	add	sp, #16
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c18:	2013      	movs	r0, #19
 8000c1a:	183b      	adds	r3, r7, r0
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	2120      	movs	r1, #32
 8000c20:	5c52      	ldrb	r2, [r2, r1]
 8000c22:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c24:	183b      	adds	r3, r7, r0
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_CAN_ConfigFilter+0x30>
 8000c2c:	2313      	movs	r3, #19
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d000      	beq.n	8000c38 <HAL_CAN_ConfigFilter+0x30>
 8000c36:	e0cd      	b.n	8000dd4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	58d3      	ldr	r3, [r2, r3]
 8000c40:	2201      	movs	r2, #1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	0011      	movs	r1, r2
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	221f      	movs	r2, #31
 8000c54:	4013      	ands	r3, r2
 8000c56:	2201      	movs	r2, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	2387      	movs	r3, #135	; 0x87
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	58d3      	ldr	r3, [r2, r3]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	2387      	movs	r3, #135	; 0x87
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d129      	bne.n	8000cd2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	2383      	movs	r3, #131	; 0x83
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	58d3      	ldr	r3, [r2, r3]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	2383      	movs	r3, #131	; 0x83
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	041b      	lsls	r3, r3, #16
 8000ca2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3248      	adds	r2, #72	; 0x48
 8000cae:	00d2      	lsls	r2, r2, #3
 8000cb0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	041b      	lsls	r3, r3, #16
 8000cbe:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc6:	6979      	ldr	r1, [r7, #20]
 8000cc8:	3348      	adds	r3, #72	; 0x48
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	18cb      	adds	r3, r1, r3
 8000cce:	3304      	adds	r3, #4
 8000cd0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d128      	bne.n	8000d2c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	2383      	movs	r3, #131	; 0x83
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	58d2      	ldr	r2, [r2, r3]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	2383      	movs	r3, #131	; 0x83
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d02:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3248      	adds	r2, #72	; 0x48
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d20:	6979      	ldr	r1, [r7, #20]
 8000d22:	3348      	adds	r3, #72	; 0x48
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	18cb      	adds	r3, r1, r3
 8000d28:	3304      	adds	r3, #4
 8000d2a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10c      	bne.n	8000d4e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2381      	movs	r3, #129	; 0x81
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	58d3      	ldr	r3, [r2, r3]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	43d2      	mvns	r2, r2
 8000d40:	401a      	ands	r2, r3
 8000d42:	0011      	movs	r1, r2
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	2381      	movs	r3, #129	; 0x81
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	50d1      	str	r1, [r2, r3]
 8000d4c:	e00a      	b.n	8000d64 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	2381      	movs	r3, #129	; 0x81
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	58d2      	ldr	r2, [r2, r3]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	2381      	movs	r3, #129	; 0x81
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10c      	bne.n	8000d86 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2385      	movs	r3, #133	; 0x85
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	58d3      	ldr	r3, [r2, r3]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	43d2      	mvns	r2, r2
 8000d78:	401a      	ands	r2, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	2385      	movs	r3, #133	; 0x85
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	50d1      	str	r1, [r2, r3]
 8000d84:	e00a      	b.n	8000d9c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	2385      	movs	r3, #133	; 0x85
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	58d2      	ldr	r2, [r2, r3]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	0011      	movs	r1, r2
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	2385      	movs	r3, #133	; 0x85
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10a      	bne.n	8000dba <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	2387      	movs	r3, #135	; 0x87
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	58d2      	ldr	r2, [r2, r3]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	431a      	orrs	r2, r3
 8000db0:	0011      	movs	r1, r2
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	2387      	movs	r3, #135	; 0x87
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	02d2      	lsls	r2, r2, #11
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
  }
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b006      	add	sp, #24
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2220      	movs	r2, #32
 8000df8:	5c9b      	ldrb	r3, [r3, r2]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d12f      	bne.n	8000e60 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2220      	movs	r2, #32
 8000e04:	2102      	movs	r1, #2
 8000e06:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2101      	movs	r1, #1
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e18:	f7ff fdee 	bl	80009f8 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e20:	e013      	b.n	8000e4a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e22:	f7ff fde9 	bl	80009f8 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b0a      	cmp	r3, #10
 8000e2e:	d90c      	bls.n	8000e4a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0292      	lsls	r2, r2, #10
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2220      	movs	r2, #32
 8000e42:	2105      	movs	r1, #5
 8000e44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e012      	b.n	8000e70 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	d1e5      	bne.n	8000e22 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	0312      	lsls	r2, r2, #12
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
  }
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b004      	add	sp, #16
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e86:	2017      	movs	r0, #23
 8000e88:	183b      	adds	r3, r7, r0
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	5c52      	ldrb	r2, [r2, r1]
 8000e90:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_CAN_GetRxMessage+0x2e>
 8000e9a:	2317      	movs	r3, #23
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d000      	beq.n	8000ea6 <HAL_CAN_GetRxMessage+0x2e>
 8000ea4:	e0f8      	b.n	8001098 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10e      	bne.n	8000eca <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d117      	bne.n	8000ee8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	0392      	lsls	r2, r2, #14
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ee      	b.n	80010a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0392      	lsls	r2, r2, #14
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0df      	b.n	80010a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	321b      	adds	r2, #27
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	58d3      	ldr	r3, [r2, r3]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10b      	bne.n	8000f1c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	321b      	adds	r2, #27
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	58d3      	ldr	r3, [r2, r3]
 8000f10:	0d5b      	lsrs	r3, r3, #21
 8000f12:	055b      	lsls	r3, r3, #21
 8000f14:	0d5a      	lsrs	r2, r3, #21
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e00a      	b.n	8000f32 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	321b      	adds	r2, #27
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	58d3      	ldr	r3, [r2, r3]
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	321b      	adds	r2, #27
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	58d3      	ldr	r3, [r2, r3]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	401a      	ands	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	331b      	adds	r3, #27
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	3304      	adds	r3, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	220f      	movs	r2, #15
 8000f58:	401a      	ands	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	331b      	adds	r3, #27
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	401a      	ands	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	331b      	adds	r3, #27
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	0c1a      	lsrs	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	23dc      	movs	r3, #220	; 0xdc
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	188a      	adds	r2, r1, r2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	23dc      	movs	r3, #220	; 0xdc
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	188a      	adds	r2, r1, r2
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0a1a      	lsrs	r2, r3, #8
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	23dc      	movs	r3, #220	; 0xdc
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	188a      	adds	r2, r1, r2
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0c1a      	lsrs	r2, r3, #16
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	23dc      	movs	r3, #220	; 0xdc
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	188a      	adds	r2, r1, r2
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0e1a      	lsrs	r2, r3, #24
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	23de      	movs	r3, #222	; 0xde
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	188a      	adds	r2, r1, r2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3304      	adds	r3, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	23de      	movs	r3, #222	; 0xde
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	188a      	adds	r2, r1, r2
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0a1a      	lsrs	r2, r3, #8
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	23de      	movs	r3, #222	; 0xde
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	188a      	adds	r2, r1, r2
 8001042:	18d3      	adds	r3, r2, r3
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0c1a      	lsrs	r2, r3, #16
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3306      	adds	r3, #6
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	23de      	movs	r3, #222	; 0xde
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	188a      	adds	r2, r1, r2
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0e1a      	lsrs	r2, r3, #24
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3307      	adds	r3, #7
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2120      	movs	r1, #32
 800107e:	430a      	orrs	r2, r1
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	e007      	b.n	8001094 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2120      	movs	r1, #32
 8001090:	430a      	orrs	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	e007      	b.n	80010a8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	02d2      	lsls	r2, r2, #11
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
  }
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010be:	200b      	movs	r0, #11
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	2120      	movs	r1, #32
 80010c6:	5c52      	ldrb	r2, [r2, r1]
 80010c8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ca:	183b      	adds	r3, r7, r0
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d004      	beq.n	80010dc <HAL_CAN_GetRxFifoFillLevel+0x2c>
 80010d2:	230b      	movs	r3, #11
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d10f      	bne.n	80010fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e005      	b.n	80010fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2203      	movs	r2, #3
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b08a      	sub	sp, #40	; 0x28
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_CAN_IRQHandler+0x46>
 800114a:	e084      	b.n	8001256 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d024      	beq.n	800119e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d004      	beq.n	800116e <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	0018      	movs	r0, r3
 8001168:	f000 f97e 	bl	8001468 <HAL_CAN_TxMailbox0CompleteCallback>
 800116c:	e017      	b.n	800119e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	d005      	beq.n	8001182 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	4313      	orrs	r3, r2
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
 8001180:	e00d      	b.n	800119e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	d005      	beq.n	8001196 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0152      	lsls	r2, r2, #5
 8001190:	4313      	orrs	r3, r2
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	e003      	b.n	800119e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f000 f97d 	bl	8001498 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	d028      	beq.n	80011fa <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d004      	beq.n	80011c6 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f95a 	bl	8001478 <HAL_CAN_TxMailbox1CompleteCallback>
 80011c4:	e019      	b.n	80011fa <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	d005      	beq.n	80011dc <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	4313      	orrs	r3, r2
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	e00e      	b.n	80011fa <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4013      	ands	r3, r2
 80011e4:	d005      	beq.n	80011f2 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	01d2      	lsls	r2, r2, #7
 80011ec:	4313      	orrs	r3, r2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	e003      	b.n	80011fa <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f957 	bl	80014a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	025b      	lsls	r3, r3, #9
 8001200:	4013      	ands	r3, r2
 8001202:	d028      	beq.n	8001256 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0252      	lsls	r2, r2, #9
 800120c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	4013      	ands	r3, r2
 8001216:	d004      	beq.n	8001222 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f934 	bl	8001488 <HAL_CAN_TxMailbox2CompleteCallback>
 8001220:	e019      	b.n	8001256 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	02db      	lsls	r3, r3, #11
 8001228:	4013      	ands	r3, r2
 800122a:	d005      	beq.n	8001238 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	0212      	lsls	r2, r2, #8
 8001232:	4313      	orrs	r3, r2
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	e00e      	b.n	8001256 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	031b      	lsls	r3, r3, #12
 800123e:	4013      	ands	r3, r2
 8001240:	d005      	beq.n	800124e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	0252      	lsls	r2, r2, #9
 8001248:	4313      	orrs	r3, r2
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	e003      	b.n	8001256 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f000 f931 	bl	80014b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	2208      	movs	r2, #8
 800125a:	4013      	ands	r3, r2
 800125c:	d00c      	beq.n	8001278 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2210      	movs	r2, #16
 8001262:	4013      	ands	r3, r2
 8001264:	d008      	beq.n	8001278 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4313      	orrs	r3, r2
 800126e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2210      	movs	r2, #16
 8001276:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2204      	movs	r2, #4
 800127c:	4013      	ands	r3, r2
 800127e:	d00b      	beq.n	8001298 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2208      	movs	r2, #8
 8001284:	4013      	ands	r3, r2
 8001286:	d007      	beq.n	8001298 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2208      	movs	r2, #8
 800128e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	0018      	movs	r0, r3
 8001294:	f000 f920 	bl	80014d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d009      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2203      	movs	r2, #3
 80012a8:	4013      	ands	r3, r2
 80012aa:	d003      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f90a 	bl	80014c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	4013      	ands	r3, r2
 80012ba:	d00c      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2210      	movs	r2, #16
 80012c0:	4013      	ands	r3, r2
 80012c2:	d008      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	00d2      	lsls	r2, r2, #3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2210      	movs	r2, #16
 80012d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	2220      	movs	r2, #32
 80012da:	4013      	ands	r3, r2
 80012dc:	d00b      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2208      	movs	r2, #8
 80012e2:	4013      	ands	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2208      	movs	r2, #8
 80012ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 f901 	bl	80014f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2210      	movs	r2, #16
 80012fa:	4013      	ands	r3, r2
 80012fc:	d009      	beq.n	8001312 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
 8001308:	d003      	beq.n	8001312 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	0018      	movs	r0, r3
 800130e:	f000 f8eb 	bl	80014e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001312:	6a3a      	ldr	r2, [r7, #32]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d00b      	beq.n	8001334 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2210      	movs	r2, #16
 8001320:	4013      	ands	r3, r2
 8001322:	d007      	beq.n	8001334 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2210      	movs	r2, #16
 800132a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f8ea 	bl	8001508 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001334:	6a3a      	ldr	r2, [r7, #32]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	4013      	ands	r3, r2
 800133c:	d00b      	beq.n	8001356 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	2208      	movs	r2, #8
 8001342:	4013      	ands	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2208      	movs	r2, #8
 800134c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f8e1 	bl	8001518 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_CAN_IRQHandler+0x25c>
 8001360:	e071      	b.n	8001446 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2204      	movs	r2, #4
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_CAN_IRQHandler+0x266>
 800136a:	e068      	b.n	800143e <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4013      	ands	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800137c:	d003      	beq.n	8001386 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	2201      	movs	r2, #1
 8001382:	4313      	orrs	r3, r2
 8001384:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	2202      	movs	r2, #2
 800139c:	4313      	orrs	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013b0:	d003      	beq.n	80013ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	2204      	movs	r2, #4
 80013b6:	4313      	orrs	r3, r2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d03c      	beq.n	800143e <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2270      	movs	r2, #112	; 0x70
 80013c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ca:	d038      	beq.n	800143e <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2270      	movs	r2, #112	; 0x70
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b30      	cmp	r3, #48	; 0x30
 80013d4:	d016      	beq.n	8001404 <HAL_CAN_IRQHandler+0x2fe>
 80013d6:	d804      	bhi.n	80013e2 <HAL_CAN_IRQHandler+0x2dc>
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d009      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x2ea>
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d00c      	beq.n	80013fa <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013e0:	e025      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80013e2:	2b50      	cmp	r3, #80	; 0x50
 80013e4:	d018      	beq.n	8001418 <HAL_CAN_IRQHandler+0x312>
 80013e6:	2b60      	cmp	r3, #96	; 0x60
 80013e8:	d01b      	beq.n	8001422 <HAL_CAN_IRQHandler+0x31c>
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d00f      	beq.n	800140e <HAL_CAN_IRQHandler+0x308>
            break;
 80013ee:	e01e      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2208      	movs	r2, #8
 80013f4:	4313      	orrs	r3, r2
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013f8:	e019      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	2210      	movs	r2, #16
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001402:	e014      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	2220      	movs	r2, #32
 8001408:	4313      	orrs	r3, r2
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800140c:	e00f      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	2240      	movs	r2, #64	; 0x40
 8001412:	4313      	orrs	r3, r2
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001416:	e00a      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	4313      	orrs	r3, r2
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001420:	e005      	b.n	800142e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	0052      	lsls	r2, r2, #1
 8001428:	4313      	orrs	r3, r2
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800142c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2170      	movs	r1, #112	; 0x70
 800143a:	438a      	bics	r2, r1
 800143c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2204      	movs	r2, #4
 8001444:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f864 	bl	8001528 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b00a      	add	sp, #40	; 0x28
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b7f      	cmp	r3, #127	; 0x7f
 800154a:	d809      	bhi.n	8001560 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	001a      	movs	r2, r3
 8001552:	231f      	movs	r3, #31
 8001554:	401a      	ands	r2, r3
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_EnableIRQ+0x30>)
 8001558:	2101      	movs	r1, #1
 800155a:	4091      	lsls	r1, r2
 800155c:	000a      	movs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  }
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	0002      	movs	r2, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b7f      	cmp	r3, #127	; 0x7f
 8001580:	d828      	bhi.n	80015d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <__NVIC_SetPriority+0xd4>)
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b25b      	sxtb	r3, r3
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	33c0      	adds	r3, #192	; 0xc0
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	589b      	ldr	r3, [r3, r2]
 8001592:	1dfa      	adds	r2, r7, #7
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	0011      	movs	r1, r2
 8001598:	2203      	movs	r2, #3
 800159a:	400a      	ands	r2, r1
 800159c:	00d2      	lsls	r2, r2, #3
 800159e:	21ff      	movs	r1, #255	; 0xff
 80015a0:	4091      	lsls	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	401a      	ands	r2, r3
 80015a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	019b      	lsls	r3, r3, #6
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	401a      	ands	r2, r3
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	2303      	movs	r3, #3
 80015ba:	4003      	ands	r3, r0
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <__NVIC_SetPriority+0xd4>)
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	430a      	orrs	r2, r1
 80015cc:	33c0      	adds	r3, #192	; 0xc0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015d2:	e031      	b.n	8001638 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <__NVIC_SetPriority+0xd8>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	0019      	movs	r1, r3
 80015dc:	230f      	movs	r3, #15
 80015de:	400b      	ands	r3, r1
 80015e0:	3b08      	subs	r3, #8
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3306      	adds	r3, #6
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	18d3      	adds	r3, r2, r3
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1dfa      	adds	r2, r7, #7
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	0011      	movs	r1, r2
 80015f4:	2203      	movs	r2, #3
 80015f6:	400a      	ands	r2, r1
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	21ff      	movs	r1, #255	; 0xff
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	43d2      	mvns	r2, r2
 8001602:	401a      	ands	r2, r3
 8001604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	401a      	ands	r2, r3
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	2303      	movs	r3, #3
 8001616:	4003      	ands	r3, r0
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <__NVIC_SetPriority+0xd8>)
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	001c      	movs	r4, r3
 8001624:	230f      	movs	r3, #15
 8001626:	4023      	ands	r3, r4
 8001628:	3b08      	subs	r3, #8
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	430a      	orrs	r2, r1
 800162e:	3306      	adds	r3, #6
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	18c3      	adds	r3, r0, r3
 8001634:	3304      	adds	r3, #4
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b003      	add	sp, #12
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <SysTick_Config+0x40>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e010      	b.n	8001680 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <SysTick_Config+0x44>)
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3a01      	subs	r2, #1
 8001664:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	2301      	movs	r3, #1
 8001668:	425b      	negs	r3, r3
 800166a:	2103      	movs	r1, #3
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ff7d 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <SysTick_Config+0x44>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x44>)
 800167a:	2207      	movs	r2, #7
 800167c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	00ffffff 	.word	0x00ffffff
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	210f      	movs	r1, #15
 800169c:	187b      	adds	r3, r7, r1
 800169e:	1c02      	adds	r2, r0, #0
 80016a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	0002      	movs	r2, r0
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff33 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ffaf 	bl	8001648 <SysTick_Config>
 80016ea:	0003      	movs	r3, r0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e149      	b.n	8001998 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x28>
 800171a:	e13a      	b.n	8001992 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d00b      	beq.n	800173c <HAL_GPIO_Init+0x48>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001730:	2b11      	cmp	r3, #17
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b12      	cmp	r3, #18
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	2201      	movs	r2, #1
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0xea>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	58d3      	ldr	r3, [r2, r3]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4013      	ands	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2107      	movs	r1, #7
 800180a:	400b      	ands	r3, r1
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	401a      	ands	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_GPIO_Init+0x174>
 8001866:	e094      	b.n	8001992 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001880:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	589b      	ldr	r3, [r3, r2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	2390      	movs	r3, #144	; 0x90
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x1d6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <HAL_GPIO_Init+0x2c4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x1d2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a40      	ldr	r2, [pc, #256]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x1ce>
 80018be:	2302      	movs	r3, #2
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x1d8>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x1d8>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x1d8>
 80018ca:	2300      	movs	r3, #0
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	2103      	movs	r1, #3
 80018d0:	400a      	ands	r2, r1
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018dc:	4935      	ldr	r1, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x2c0>)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	025b      	lsls	r3, r3, #9
 8001902:	4013      	ands	r3, r2
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43da      	mvns	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	035b      	lsls	r3, r3, #13
 8001956:	4013      	ands	r3, r2
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	4013      	ands	r3, r2
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	40da      	lsrs	r2, r3
 80019a0:	1e13      	subs	r3, r2, #0
 80019a2:	d000      	beq.n	80019a6 <HAL_GPIO_Init+0x2b2>
 80019a4:	e6ae      	b.n	8001704 <HAL_GPIO_Init+0x10>
  } 
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b006      	add	sp, #24
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	48000400 	.word	0x48000400
 80019bc:	48000800 	.word	0x48000800
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	0008      	movs	r0, r1
 80019ce:	0011      	movs	r1, r2
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	1c02      	adds	r2, r0, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	1c7b      	adds	r3, r7, #1
 80019d8:	1c0a      	adds	r2, r1, #0
 80019da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	1c7b      	adds	r3, r7, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	000a      	movs	r2, r1
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	041a      	lsls	r2, r3, #16
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	1cb9      	adds	r1, r7, #2
 8001a22:	8809      	ldrh	r1, [r1, #0]
 8001a24:	400b      	ands	r3, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 fb76 	bl	8002134 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d100      	bne.n	8001a54 <HAL_RCC_OscConfig+0x20>
 8001a52:	e08e      	b.n	8001b72 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a54:	4bc5      	ldr	r3, [pc, #788]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d00e      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a60:	4bc2      	ldr	r3, [pc, #776]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	220c      	movs	r2, #12
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d117      	bne.n	8001a9c <HAL_RCC_OscConfig+0x68>
 8001a6c:	4bbf      	ldr	r3, [pc, #764]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	025b      	lsls	r3, r3, #9
 8001a74:	401a      	ands	r2, r3
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	025b      	lsls	r3, r3, #9
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d10e      	bne.n	8001a9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7e:	4bbb      	ldr	r3, [pc, #748]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	4013      	ands	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_RCC_OscConfig+0x58>
 8001a8a:	e071      	b.n	8001b70 <HAL_RCC_OscConfig+0x13c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d000      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a94:	e06c      	b.n	8001b70 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 fb4c 	bl	8002134 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x80>
 8001aa4:	4bb1      	ldr	r3, [pc, #708]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0249      	lsls	r1, r1, #9
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e02f      	b.n	8001b14 <HAL_RCC_OscConfig+0xe0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xa2>
 8001abc:	4bab      	ldr	r3, [pc, #684]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ac2:	49ab      	ldr	r1, [pc, #684]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	4ba8      	ldr	r3, [pc, #672]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ace:	49a9      	ldr	r1, [pc, #676]	; (8001d74 <HAL_RCC_OscConfig+0x340>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e01e      	b.n	8001b14 <HAL_RCC_OscConfig+0xe0>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10e      	bne.n	8001afc <HAL_RCC_OscConfig+0xc8>
 8001ade:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4ba2      	ldr	r3, [pc, #648]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	02c9      	lsls	r1, r1, #11
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	4b9f      	ldr	r3, [pc, #636]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b9e      	ldr	r3, [pc, #632]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0249      	lsls	r1, r1, #9
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xe0>
 8001afc:	4b9b      	ldr	r3, [pc, #620]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b02:	499b      	ldr	r1, [pc, #620]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b97      	ldr	r3, [pc, #604]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b0e:	4999      	ldr	r1, [pc, #612]	; (8001d74 <HAL_RCC_OscConfig+0x340>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ff6c 	bl	80009f8 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7fe ff67 	bl	80009f8 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2fd      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0xf2>
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe ff57 	bl	80009f8 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7fe ff52 	bl	80009f8 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e2e8      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x11c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x14a>
 8001b7c:	e06c      	b.n	8001c58 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	220c      	movs	r2, #12
 8001b84:	4013      	ands	r3, r2
 8001b86:	d00e      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d11f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1a0>
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	23c0      	movs	r3, #192	; 0xc0
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_OscConfig+0x188>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2bb      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	22f8      	movs	r2, #248	; 0xf8
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00da      	lsls	r2, r3, #3
 8001bcc:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e041      	b.n	8001c58 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d024      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe ff06 	bl	80009f8 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7fe ff01 	bl	80009f8 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e297      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d0f1      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	22f8      	movs	r2, #248	; 0xf8
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00da      	lsls	r2, r3, #3
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e018      	b.n	8001c58 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	438a      	bics	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe fee1 	bl	80009f8 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7fe fedc 	bl	80009f8 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e272      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d1f1      	bne.n	8001c3c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7fe febf 	bl	80009f8 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7fe feba 	bl	80009f8 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e250      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0f1      	beq.n	8001c80 <HAL_RCC_OscConfig+0x24c>
 8001c9c:	e018      	b.n	8001cd0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7fe fea5 	bl	80009f8 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7fe fea0 	bl	80009f8 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e236      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d1f1      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d100      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2a8>
 8001cda:	e0b5      	b.n	8001e48 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	4013      	ands	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	0549      	lsls	r1, r1, #21
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	055b      	lsls	r3, r3, #21
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d11a      	bne.n	8001d56 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0049      	lsls	r1, r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe fe63 	bl	80009f8 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe fe5e 	bl	80009f8 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1f4      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x348>
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d60:	6a1a      	ldr	r2, [r3, #32]
 8001d62:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	621a      	str	r2, [r3, #32]
 8001d6a:	e035      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3a4>
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	fffeffff 	.word	0xfffeffff
 8001d74:	fffbffff 	.word	0xfffbffff
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x36a>
 8001d84:	4bca      	ldr	r3, [pc, #808]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4bc9      	ldr	r3, [pc, #804]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	621a      	str	r2, [r3, #32]
 8001d90:	4bc7      	ldr	r3, [pc, #796]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	4bc6      	ldr	r3, [pc, #792]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001d96:	2104      	movs	r1, #4
 8001d98:	438a      	bics	r2, r1
 8001d9a:	621a      	str	r2, [r3, #32]
 8001d9c:	e01c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3a4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x38c>
 8001da6:	4bc2      	ldr	r3, [pc, #776]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4bc1      	ldr	r3, [pc, #772]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001dac:	2104      	movs	r1, #4
 8001dae:	430a      	orrs	r2, r1
 8001db0:	621a      	str	r2, [r3, #32]
 8001db2:	4bbf      	ldr	r3, [pc, #764]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	4bbe      	ldr	r3, [pc, #760]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	621a      	str	r2, [r3, #32]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3a4>
 8001dc0:	4bbb      	ldr	r3, [pc, #748]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4bba      	ldr	r3, [pc, #744]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
 8001dcc:	4bb8      	ldr	r3, [pc, #736]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	4bb7      	ldr	r3, [pc, #732]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d014      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7fe fe0a 	bl	80009f8 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe fe05 	bl	80009f8 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4aaf      	ldr	r2, [pc, #700]	; (80020b4 <HAL_RCC_OscConfig+0x680>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e19a      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	4bac      	ldr	r3, [pc, #688]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	2202      	movs	r2, #2
 8001e04:	4013      	ands	r3, r2
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x3b6>
 8001e08:	e013      	b.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fdf5 	bl	80009f8 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	e009      	b.n	8001e28 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe fdf0 	bl	80009f8 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	4aa5      	ldr	r2, [pc, #660]	; (80020b4 <HAL_RCC_OscConfig+0x680>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e185      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4ba1      	ldr	r3, [pc, #644]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e32:	231f      	movs	r3, #31
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3c:	4b9c      	ldr	r3, [pc, #624]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e42:	499d      	ldr	r1, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x684>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d12a      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e5a:	4b95      	ldr	r3, [pc, #596]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5e:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e60:	2104      	movs	r1, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e66:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fdc1 	bl	80009f8 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7c:	f7fe fdbc 	bl	80009f8 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e152      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d0f1      	beq.n	8001e7c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	22f8      	movs	r2, #248	; 0xf8
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	00da      	lsls	r2, r3, #3
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
 8001eae:	e034      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	d111      	bne.n	8001edc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001eb8:	4b7d      	ldr	r3, [pc, #500]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	4b7c      	ldr	r3, [pc, #496]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ec4:	4b7a      	ldr	r3, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	22f8      	movs	r2, #248	; 0xf8
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	00da      	lsls	r2, r3, #3
 8001ed4:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eda:	e01e      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001edc:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee0:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ee8:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eec:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fd80 	bl	80009f8 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001efe:	f7fe fd7b 	bl	80009f8 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e111      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	4013      	ands	r3, r2
 8001f22:	d05c      	beq.n	8001fde <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f24:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d00e      	beq.n	8001f4e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f30:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	220c      	movs	r2, #12
 8001f36:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d114      	bne.n	8001f66 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	401a      	ands	r2, r3
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f4e:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	025b      	lsls	r3, r3, #9
 8001f56:	4013      	ands	r3, r2
 8001f58:	d040      	beq.n	8001fdc <HAL_RCC_OscConfig+0x5a8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d03c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e6      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01b      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0249      	lsls	r1, r1, #9
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fd3c 	bl	80009f8 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f86:	f7fe fd37 	bl	80009f8 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0cd      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f98:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x552>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001fac:	4943      	ldr	r1, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fd21 	bl	80009f8 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fbc:	f7fe fd1c 	bl	80009f8 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0b2      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x588>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fdc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5b4>
 8001fe6:	e0a4      	b.n	8002132 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	220c      	movs	r2, #12
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5c2>
 8001ff4:	e078      	b.n	80020e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d14c      	bne.n	8002098 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002004:	492e      	ldr	r1, [pc, #184]	; (80020c0 <HAL_RCC_OscConfig+0x68c>)
 8002006:	400a      	ands	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fcf5 	bl	80009f8 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fcf0 	bl	80009f8 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e086      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	049b      	lsls	r3, r3, #18
 800202e:	4013      	ands	r3, r2
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	220f      	movs	r2, #15
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002042:	430a      	orrs	r2, r1
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_RCC_OscConfig+0x690>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	431a      	orrs	r2, r3
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0449      	lsls	r1, r1, #17
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fcc3 	bl	80009f8 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fcbe 	bl	80009f8 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e054      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	049b      	lsls	r3, r3, #18
 8002092:	4013      	ands	r3, r2
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x644>
 8002096:	e04c      	b.n	8002132 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCC_OscConfig+0x67c>)
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <HAL_RCC_OscConfig+0x68c>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fca8 	bl	80009f8 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x6a6>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	00001388 	.word	0x00001388
 80020b8:	efffffff 	.word	0xefffffff
 80020bc:	fffeffff 	.word	0xfffeffff
 80020c0:	feffffff 	.word	0xfeffffff
 80020c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fc96 	bl	80009f8 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e02c      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_RCC_OscConfig+0x708>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	049b      	lsls	r3, r3, #18
 80020e2:	4013      	ands	r3, r2
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x694>
 80020e6:	e024      	b.n	8002132 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e01f      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_RCC_OscConfig+0x708>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_OscConfig+0x708>)
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	401a      	ands	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	429a      	cmp	r2, r3
 800210e:	d10e      	bne.n	800212e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	220f      	movs	r2, #15
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	23f0      	movs	r3, #240	; 0xf0
 8002122:	039b      	lsls	r3, r3, #14
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b008      	add	sp, #32
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0bf      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d911      	bls.n	8002186 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0a6      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d015      	beq.n	80021bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d006      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80021a0:	21e0      	movs	r1, #224	; 0xe0
 80021a2:	00c9      	lsls	r1, r1, #3
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	22f0      	movs	r2, #240	; 0xf0
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	4013      	ands	r3, r2
 80021d8:	d120      	bne.n	800221c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07a      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	049b      	lsls	r3, r3, #18
 80021ee:	4013      	ands	r3, r2
 80021f0:	d114      	bne.n	800221c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06e      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	4013      	ands	r3, r2
 8002208:	d108      	bne.n	800221c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e062      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e05b      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2203      	movs	r2, #3
 8002222:	4393      	bics	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe fbe2 	bl	80009f8 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002238:	e009      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe fbdd 	bl	80009f8 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_RCC_ClockConfig+0x1a4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e042      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	220c      	movs	r2, #12
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1ec      	bne.n	800223a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d211      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	4393      	bics	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x19c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e020      	b.n	80022d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2204      	movs	r2, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_RCC_ClockConfig+0x1a8>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022b0:	f000 f820 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b4:	0001      	movs	r1, r0
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1a0>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	220f      	movs	r2, #15
 80022be:	4013      	ands	r3, r2
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x1ac>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	000a      	movs	r2, r1
 80022c6:	40da      	lsrs	r2, r3
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1b0>)
 80022ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fb4d 	bl	800096c <HAL_InitTick>
  
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	fffff8ff 	.word	0xfffff8ff
 80022ec:	080024b8 	.word	0x080024b8
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b08f      	sub	sp, #60	; 0x3c
 80022f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80022fa:	2314      	movs	r3, #20
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	4a37      	ldr	r2, [pc, #220]	; (80023dc <HAL_RCC_GetSysClockFreq+0xe8>)
 8002300:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002302:	c313      	stmia	r3!, {r0, r1, r4}
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4a35      	ldr	r2, [pc, #212]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xec>)
 800230c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800230e:	c313      	stmia	r3!, {r0, r1, r4}
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	220c      	movs	r2, #12
 8002332:	4013      	ands	r3, r2
 8002334:	2b08      	cmp	r3, #8
 8002336:	d006      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x52>
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d043      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0xd0>
 800233c:	2b04      	cmp	r3, #4
 800233e:	d144      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002344:	e044      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	220f      	movs	r2, #15
 800234c:	4013      	ands	r3, r2
 800234e:	2214      	movs	r2, #20
 8002350:	18ba      	adds	r2, r7, r2
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	220f      	movs	r2, #15
 800235c:	4013      	ands	r3, r2
 800235e:	1d3a      	adds	r2, r7, #4
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	401a      	ands	r2, r3
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	429a      	cmp	r2, r3
 8002372:	d109      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002376:	481c      	ldr	r0, [pc, #112]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002378:	f7fd fec6 	bl	8000108 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	001a      	movs	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	4353      	muls	r3, r2
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
 8002386:	e01a      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238a:	23c0      	movs	r3, #192	; 0xc0
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	401a      	ands	r2, r3
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	429a      	cmp	r2, r3
 8002396:	d109      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800239a:	4814      	ldr	r0, [pc, #80]	; (80023ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800239c:	f7fd feb4 	bl	8000108 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	001a      	movs	r2, r3
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	4353      	muls	r3, r2
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
 80023aa:	e008      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ae:	480e      	ldr	r0, [pc, #56]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b0:	f7fd feaa 	bl	8000108 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	001a      	movs	r2, r3
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	4353      	muls	r3, r2
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023c2:	e005      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023c8:	e002      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b00f      	add	sp, #60	; 0x3c
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	08002460 	.word	0x08002460
 80023e0:	08002470 	.word	0x08002470
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	02dc6c00 	.word	0x02dc6c00

080023f0 <__libc_init_array>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	2600      	movs	r6, #0
 80023f4:	4d0c      	ldr	r5, [pc, #48]	; (8002428 <__libc_init_array+0x38>)
 80023f6:	4c0d      	ldr	r4, [pc, #52]	; (800242c <__libc_init_array+0x3c>)
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	42a6      	cmp	r6, r4
 80023fe:	d109      	bne.n	8002414 <__libc_init_array+0x24>
 8002400:	2600      	movs	r6, #0
 8002402:	f000 f821 	bl	8002448 <_init>
 8002406:	4d0a      	ldr	r5, [pc, #40]	; (8002430 <__libc_init_array+0x40>)
 8002408:	4c0a      	ldr	r4, [pc, #40]	; (8002434 <__libc_init_array+0x44>)
 800240a:	1b64      	subs	r4, r4, r5
 800240c:	10a4      	asrs	r4, r4, #2
 800240e:	42a6      	cmp	r6, r4
 8002410:	d105      	bne.n	800241e <__libc_init_array+0x2e>
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	00b3      	lsls	r3, r6, #2
 8002416:	58eb      	ldr	r3, [r5, r3]
 8002418:	4798      	blx	r3
 800241a:	3601      	adds	r6, #1
 800241c:	e7ee      	b.n	80023fc <__libc_init_array+0xc>
 800241e:	00b3      	lsls	r3, r6, #2
 8002420:	58eb      	ldr	r3, [r5, r3]
 8002422:	4798      	blx	r3
 8002424:	3601      	adds	r6, #1
 8002426:	e7f2      	b.n	800240e <__libc_init_array+0x1e>
 8002428:	080024c8 	.word	0x080024c8
 800242c:	080024c8 	.word	0x080024c8
 8002430:	080024c8 	.word	0x080024c8
 8002434:	080024cc 	.word	0x080024cc

08002438 <memset>:
 8002438:	0003      	movs	r3, r0
 800243a:	1812      	adds	r2, r2, r0
 800243c:	4293      	cmp	r3, r2
 800243e:	d100      	bne.n	8002442 <memset+0xa>
 8002440:	4770      	bx	lr
 8002442:	7019      	strb	r1, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	e7f9      	b.n	800243c <memset+0x4>

08002448 <_init>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244e:	bc08      	pop	{r3}
 8002450:	469e      	mov	lr, r3
 8002452:	4770      	bx	lr

08002454 <_fini>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr
